// PHW Nextflow Config


includeConfig 'prod_slurmqueue.conf'

// ## *** GENERAL CONFIG *** ##

// # Output #
// Path to output directory (containing project directories)
outdir = '{{ nfs_directory }}'


// # SLURM #
// Make sure SLURM executes jobs
process.executor = '{{ nextflow_executor | default('slurm') }}'


// # Singularity #
// Enable singularity containers
singularity.enabled = '{{ nextflow_singularity_enabled | default('true') }}'

// This should be set
singularity.autoMounts = '{{ nextflow_singularity_automounts | default('true') }}'

// Path to local singularity image directory
params.simgdir = '{{ singularity_imagedir }}'



// ## *** QC PIPELINE CONFIG *** ##

// # Projects #
// Project list in groovy list format
params.projectlist = ['argab', 'argid', 'digcd', 'digid', 'flu', 'hiv', 'wcmtb', 'wcmid' , 'testpipe' ]


// # Output #
// Path to output directory (needed here to expose to nextflow script with "$params")
params.outdir = "${outdir}"

// # MultiQC #
// Path to multiqc conf yaml file [http://multiqc.info/docs/#configuring-multiqc]
params.multiqcconf = '{{ multiqc_conf_yaml }}'


// # Centrifuge #
// Path to directory containing centrifuge DB files, with fileglob specifying basename of the database
params.centrifugedbpath = '{{ centrifuge_db }}'

// NCBI TaxID for each project to count reads beneath - used in depth calculations
taxIDargab = 469
taxIDargid = 2
taxIDdigid = 2
taxIDdigcd = 1870884
taxIDflu = 11308
taxIDhiv = 11676
taxIDwcmtb = 77643
taxIDwcmid = 1762

params.taxIDdict = [['argab', taxIDargab],
                    ['argid', taxIDargid],
                    ['digcd', taxIDdigcd],
                    ['digid', taxIDdigid],
                    ['flu', taxIDflu],
                    ['hiv', taxIDhiv],
                    ['wcmtb', taxIDwcmtb],
                    ['wcmid', taxIDwcmid]]


// ## *** HIV PIPELINE CONFIG *** ##

// # Output #
// Path to project directory (made from outdir variable in GENERAL section)
params.hivdir = "${outdir}/hiv"

// # References and databases #
// Absolute path to HIV subtype reference sequences
params.subref = '{{ hiv_comp_path }}'

// Absolute path to HIV HXB2 reference sequence
params.HXB2ref = '{{ hiv_HXB2_path }}'

// # Read cleaning and sampling #
// Sample bases target for subsampling
params.samplebases = '{{ hiv_sample_bases }}'


// # Shiver #
// Set default polishing strategy to shiver
params.shiver = '{{ hiv_shiver_enable }}'

// Absolute path to Shiver InitDir (generated by shiver_init.sh) and shiver config.sh
params.shiverinit = '{{ hiv_shiver_init }}'
params.shiverconf = '{{ hiv_shiver_conf }}'


// # Variant calling strategy #
// Set default variant strategy (VarScan, BCFtools or LoFreq)
params.variantstrategy = '{{ hiv_variant_strategy | default('VarScan') }}'

// Set proportions at which to call variants (e.g. 0.2 == 20%)
params.minvarfreq = ['0.2', '0.1', '0.01']

// Set minor variant frequency at which to call resistance (must be one of the values in params.minvarfreq)
params.selectedminvarfreq = '0.2'


// ## *** FLU PIPELINE CONFIG *** ##

// # Output #
// Path to project directory (made from outdir variable in GENERAL section)
params.fludir = "${outdir}/flu"

// # References and databases #
// Absolute path to FLU segment reference fasta
params.flurefNA = '{{ flu_ref_dir }}/{{ flu_ref_prefix }}.NA.fa' 
params.flurefHA = '{{ flu_ref_dir }}/{{ flu_ref_prefix }}.HA.fa'
params.flurefM1 = '{{ flu_ref_dir }}/{{ flu_ref_prefix }}.M1.fa'
params.flurefPB1 = '{{ flu_ref_dir }}/{{ flu_ref_prefix }}.PB1.fa'
params.flurefPB2 = '{{ flu_ref_dir }}/{{ flu_ref_prefix }}.PB2.fa'
params.flurefNP = '{{ flu_ref_dir }}/{{ flu_ref_prefix }}.NP.fa'
params.flurefNS1 = '{{ flu_ref_dir }}/{{ flu_ref_prefix }}.NS1.fa'
params.flurefPA = '{{ flu_ref_dir }}/{{ flu_ref_prefix }}.PA.fa'

// Run Shiver on these segments - reference alignments and shiver_init directories required
params.shiversegs = [ 'NA', 'HA' , 'M1' ]

// Path to the shiver config.sh file used for flu
params.flushiverconf = '{{ flu_ref_dir }}/shiver_init_FLU/config.sh'

// Path to the root shiverinit directory for flu - the shiver_init directory for each segment should be within this, named with just the segment abbreviation
params.flushiverinitroot = '{{ flu_ref_dir }}/shiver_init_FLU'


// ## *** WCMTB PIPELINE CONFIG *** ##

// Upload WCM data (production profile ONLY)
params.wcmtransferupload = 'true'

// Transfer username
transferuser = '{{ remote_wcmtb_username }}'

// Path to private SSH key for user/server
params.wcmtbkey = '{{ remote_wcmtb_ssh_privkey_path }}'

// Username for remote WCMTB server
params.wcmtbuser = "${transferuser}"

// Hostname / IP address of remote WCMTB server
params.wcmtbserver = '{{ remote_wcmtb_address }}'

// Path to upload directory for WCM TB reads 
params.wcmtbpath = "{{ remote_wcmtb_data_path }}"


// Panel to use for TB geno and resistance typing, choose from bradley-2015 or walker-2015
params.mykrobepanel = '{{ wcm_typing_panel | default('bradley-2015') }}'

// Path to directory containing WCM kraken database
params.wcmkrakendbdir = '{{ wcmid_kraken_db }}'


// ## *** ARGENT PIPELINE CONFIG *** ##
// DB to use for Abricate resistance
params.resistancedb = '{{ argent_resistance_db | default('resfinder') }}'

// DB to use for Abricate virulence
params.virulencedb = '{{ argent_virulence_db | default('vfdb') }}'


// ## *** DIGCD PIPELINE CONFIG *** ##
// Path to Mash sketches of reference sequences - used for placing samples into the database with the closest reference (smallest Mash dist)
params.digcdmashref = '{{ digcd_mash_ref }}'

// Mash distance cutoff - any assemblies further than this distance from the closest reference will not be variant called
params.digcdmaxmashdist = '{{ digcd_max_ref_dist }}'

// Path to directory containing snapperdb config files
params.digcdsnapperdbconfdir = '{{ digcd_snapperdb_conf_dir }}'

// Path to directory containing snapperdb reference files
params.digcdsnapperdbrefdir = '{{ digcd_snapperdb_ref_dir }}'

